"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
describe("Twirp errors", () => {
    it("will render a full error", () => {
        const innerError = new Error("some error");
        const twirpError = new errors_1.TwirpError(errors_1.TwirpErrorCode.NotFound, "not found");
        twirpError.withCause(innerError, true);
        twirpError.withMeta("meta1", "value1");
        twirpError.withMeta("meta2", "value2");
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.NotFound,
            msg: "not found",
            meta: {
                cause: "some error",
                meta1: "value1",
                meta2: "value2",
            }
        }));
    });
});
describe("Standard Errors", () => {
    it("will render not found error", () => {
        const twirpError = new errors_1.NotFoundError("not found");
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.NotFound,
            msg: "not found",
            meta: {}
        }));
    });
    it("will render invalid argument error", () => {
        const twirpError = new errors_1.InvalidArgumentError("field", "error");
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.InvalidArgument,
            msg: "field error",
            meta: {
                argument: "field",
            }
        }));
    });
    it("will render required error", () => {
        const twirpError = new errors_1.RequiredArgumentError("field");
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.InvalidArgument,
            msg: "field is required",
            meta: {
                argument: "field",
            }
        }));
    });
    it("will render internal server error", () => {
        const twirpError = new errors_1.InternalServerError("internal");
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.Internal,
            msg: "internal",
            meta: {}
        }));
    });
    it("will render internal server error with inner", () => {
        const inner = new Error("inner");
        const twirpError = new errors_1.InternalServerErrorWith(inner);
        expect(twirpError.toJSON()).toEqual(JSON.stringify({
            code: errors_1.TwirpErrorCode.Internal,
            msg: "inner",
            meta: {
                cause: "Error"
            }
        }));
    });
});
