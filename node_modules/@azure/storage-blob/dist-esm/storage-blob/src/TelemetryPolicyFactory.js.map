{"version":3,"file":"TelemetryPolicyFactory.js","sourceRoot":"","sources":["../../../src/TelemetryPolicyFactory.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EACL,MAAM,GAKP,MAAM,kBAAkB,CAAC;AAC1B,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AAEzB,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD;;GAEG;AACH,MAAM,OAAO,sBAAsB;IAMjC;;;OAGG;IACH,YAAY,SAA4B;QACtC,MAAM,aAAa,GAAa,EAAE,CAAC;QAEnC,IAAI,MAAM,EAAE;YACV,IAAI,SAAS,EAAE;gBACb,MAAM,eAAe,GAAG,SAAS,CAAC,eAAe,IAAI,EAAE,CAAC;gBACxD,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,aAAa,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC/E,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBACrC;aACF;YAED,mCAAmC;YACnC,MAAM,OAAO,GAAG,wBAAwB,WAAW,EAAE,CAAC;YACtD,IAAI,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC7B;YAED,mDAAmD;YACnD,IAAI,WAAW,GAAG,iBAAiB,OAAO,CAAC,OAAO,GAAG,CAAC;YACtD,IAAI,EAAE,EAAE;gBACN,WAAW,GAAG,iBAAiB,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC;aACjF;YACD,IAAI,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC7C,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACjC;SACF;QAED,IAAI,CAAC,eAAe,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,UAAyB,EAAE,OAA6B;QACpE,OAAO,IAAI,eAAe,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACxE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions,\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  /**\n   * @internal\n   */\n  public readonly telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      let runtimeInfo = `(NODE-VERSION ${process.version})`;\n      if (os) {\n        runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      }\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n"]}